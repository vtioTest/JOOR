package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class TC4PositiveScenarioWithMissingRequiredData {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "https://staging.joordev.com/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testTC4PositiveScenarioWithMissingRequiredData() throws Exception {
    driver.get("https://staging.joordev.com");
    driver.findElement(By.cssSelector("a.login-button")).click();
    try {
      assertEquals("Welcome Back!", driver.findElement(By.cssSelector("h3.center-text.black-text")).getText());
    } catch (Error e) {
      verificationErrors.append(e.toString());
    }
    driver.findElement(By.id("login-name")).clear();
    driver.findElement(By.id("login-name")).sendKeys("qatest1");
    driver.findElement(By.name("data[User][password]")).clear();
    driver.findElement(By.name("data[User][password]")).sendKeys("qatest1");
    driver.findElement(By.xpath("//input[@value='Sign In']")).click();
    driver.findElement(By.xpath("//input[@value='Sign In']")).click();
    try {
      assertEquals("Orders | JOOR", driver.getTitle());
    } catch (Error e) {
      verificationErrors.append(e.toString());
    }
    driver.findElement(By.linkText("Send a Message")).click();
    driver.findElement(By.linkText("Send a Message")).click();
    try {
      assertEquals("Compose a Message", driver.findElement(By.cssSelector("div.compose.module > h1")).getText());
    } catch (Error e) {
      verificationErrors.append(e.toString());
    }
    driver.findElement(By.linkText("Send")).click();
    // ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
    String Profile = driver.findElement(By.xpath("//table[@id='dtgList']/tbody/tr[1]/td/a")).getAttribute("href");
    System.out.println(Profile);
    // ERROR: Caught exception [ERROR: Unsupported command [openWindow | ${Profile} | ]]
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | Profile | ]]
    assertEquals("", closeAlertAndGetItsText());
    driver.findElement(By.linkText("OK")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | Compose a Message | ]]
    driver.findElement(By.id("MessageSubject")).clear();
    driver.findElement(By.id("MessageSubject")).sendKeys("test");
    driver.findElement(By.id("MessageSubject")).clear();
    driver.findElement(By.id("MessageSubject")).sendKeys("test");
    driver.findElement(By.linkText("Send")).click();
    String Profile = driver.findElement(By.xpath("//table[@id='dtgList']/tbody/tr[1]/td/a")).getAttribute("href");
    System.out.println(Profile);
    // ERROR: Caught exception [ERROR: Unsupported command [openWindow | ${Profile} | ]]
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | Profile | ]]
    assertEquals("", closeAlertAndGetItsText());
    driver.findElement(By.linkText("OK")).click();
    driver.findElement(By.linkText("Send")).click();
    driver.findElement(By.linkText("Send")).click();
    driver.findElement(By.id("MessageBody")).clear();
    driver.findElement(By.id("MessageBody")).sendKeys("test message");
    driver.findElement(By.linkText("Send")).click();
    String Profile = driver.findElement(By.xpath("//table[@id='dtgList']/tbody/tr[1]/td/a")).getAttribute("href");
    System.out.println(Profile);
    // ERROR: Caught exception [ERROR: Unsupported command [openWindow | ${Profile} | ]]
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | Profile | ]]
    assertEquals("", closeAlertAndGetItsText());
    driver.findElement(By.id("MessageSendToSelectConnections")).click();
    driver.findElement(By.id("MessageSendToSelectConnections")).click();
    driver.findElement(By.linkText("OK")).click();
    driver.findElement(By.linkText("Send a Message")).click();
    driver.findElement(By.linkText("Send a Message")).click();
    driver.findElement(By.id("MessageSendToSelectConnections")).click();
    driver.findElement(By.id("MessageSendToSelectConnections")).click();
    driver.findElement(By.linkText("Send")).click();
    driver.findElement(By.linkText("Send")).click();
    String Profile = driver.findElement(By.xpath("//table[@id='dtgList']/tbody/tr[1]/td/a")).getAttribute("href");
    System.out.println(Profile);
    // ERROR: Caught exception [ERROR: Unsupported command [openWindow | ${Profile} | ]]
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | Profile | ]]
    assertEquals("", closeAlertAndGetItsText());
    driver.findElement(By.linkText("OK")).click();
    driver.findElement(By.linkText("Logout")).click();
    driver.findElement(By.linkText("Logout")).click();
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
